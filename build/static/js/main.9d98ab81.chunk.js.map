{"version":3,"sources":["components/Persons.js","components/Field.js","components/PersonForm.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Person","_ref","name","number","handleRemove","react_default","a","createElement","type","onClick","Persons","_ref2","persons","map","person","Persons_Person","key","id","Field","label","value","onChange","PersonForm","addPerson","handleName","handleNumber","onSubmit","components_Field","baseUrl","services_persons","axios","get","then","response","data","newObject","post","put","concat","delete","Notification","message","style","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","showName","setShowName","_useState9","_useState10","successMessage","setSuccessMessage","_useState11","_useState12","errorMessage","setErrorMessage","useEffect","personService","initialPersons","showMessage","setMessage","setTimeout","resetForm","filteredPersons","filter","toLowerCase","includes","handleInput","setter","event","target","notificationStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App_Notification","objectSpread","components_PersonForm","preventDefault","existingPerson","find","p","window","confirm","returnedPerson","catch","error","console","log","components_Persons","_","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d98ab81.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({ name, number, handleRemove }) => (\n  <div>{name} {number}\n    <button type=\"button\" onClick={handleRemove}>delete</button>\n  </div>\n)\n\nconst Persons = ({ persons, handleRemove }) => (\n  <div>\n    {persons.map(person =>\n      <Person key={person.id} name={person.name} number={person.number}\n        handleRemove={handleRemove(person.id)} />)}\n  </div>\n) \n\nexport default Persons\n","import React from 'react'\n\nconst Field = ({ label, value, onChange }) => (\n  <div>\n    {label}<input value={value} onChange={onChange} />\n  </div>\n)\n\nexport default Field\n","import React from 'react'\nimport Field from './Field'\n\nconst PersonForm = ({ addPerson,\n  name, handleName,\n  number, handleNumber }) => {\n\n  return (\n    <div>\n      <form onSubmit={addPerson}>\n        <Field label=\"name: \" value={name}\n         onChange={handleName} />\n        <Field label=\"number: \" value={number}\n         onChange={handleNumber} />\n        <div>\n          <button type=\"submit: \">add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default PersonForm\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject).then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n    .then(response => response.data)\n}\n\nconst remove = id => {\n  return axios.delete(`${baseUrl}/${id}`).then(response => response.data)\n}\n\nexport default { \n  getAll, \n  create, \n  update,\n  remove,\n}\n","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Field from './components/Field'\nimport personService from './services/persons'\n\nconst Notification = ({ message, style }) => (\n  message && <div style={style} >{message}</div>\n)\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ showName, setShowName ] = useState('')\n  const [ successMessage, setSuccessMessage ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const showMessage = (message, setMessage) => {\n    setMessage(message)\n    setTimeout(() => setMessage(null), 5000)\n  }\n\n  const resetForm = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const addPerson = event => {\n    event.preventDefault()\n    const existingPerson = persons.find(p => p.name === newName)\n    \n    if (existingPerson) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        personService\n          .update(existingPerson.id, { ...existingPerson, number: newNumber })\n          .then(returnedPerson => {\n            setPersons(persons.map(p =>\n              p.id !== returnedPerson.id ? p : returnedPerson))\n            showMessage(\n              `Changed ${returnedPerson.name} number with ${returnedPerson.number}`,\n              setSuccessMessage)\n            resetForm()\n          })\n          .catch(error => {\n            console.log(error.response.data)\n            showMessage(\n              `${error.response.data.error}`,\n              setErrorMessage)\n          })\n      }\n      return\n    }\n\n    personService\n      .create({name: newName, number: newNumber})\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        showMessage(`Added ${returnedPerson.name}`, setSuccessMessage)\n        resetForm()\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        showMessage(\n          `${error.response.data.error}`,\n          setErrorMessage)\n      })\n  }\n\n  const filteredPersons = showName === '' ? persons :\n    persons.filter(person =>\n      person.name.toLowerCase().includes(showName.toLowerCase()))\n\n  const handleInput = setter => event => setter(event.target.value)\n  const handleRemove = id => () => {\n    const person = persons.find(p => p.id === id)\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .remove(id)\n        .then(_ => {\n          setPersons(persons.filter(p => p.id !== id))\n          showMessage(`Deleted ${person.name}`, setSuccessMessage)\n        })\n        .catch(error => {\n          showMessage(\n            `Information of ${person.name} has already been removed from server`,\n            setErrorMessage)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  const notificationStyle = {\n    color: \"green\",\n    background: \"lightgrey\",\n    fontSize: \"20\",\n    borderStyle: \"solid\",\n    borderRadius: \"5\",\n    padding: \"10\",\n    marginBottom: \"10\",\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification style={{ ...notificationStyle, color: \"green\" }} message={successMessage} />\n      <Notification style={{ ...notificationStyle, color: \"red\" }} message={errorMessage} />\n      <Field label=\"filter shown with \" value={showName}\n        onChange={handleInput(setShowName)} />\n      <h3>Add a new</h3>\n      <PersonForm addPerson={addPerson}\n        name={newName} handleName={handleInput(setNewName)}\n        number={newNumber} handleNumber={handleInput(setNewNumber)} />\n      <h3>Numbers</h3>\n      <Persons persons={filteredPersons} handleRemove={handleRemove} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}